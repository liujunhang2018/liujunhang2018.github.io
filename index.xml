<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>思考让灵魂距离星空更近</title>
    <link>/</link>
    <description>Recent content on 思考让灵魂距离星空更近</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 27 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>信息碎片化的时代，如何进行有逻辑的思考与表达？</title>
      <link>/post/%E4%BF%A1%E6%81%AF%E7%A2%8E%E7%89%87%E5%8C%96%E7%9A%84%E6%97%B6%E4%BB%A3%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%9C%89%E9%80%BB%E8%BE%91%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E8%A1%A8%E8%BE%BE/</link>
      <pubDate>Wed, 27 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E4%BF%A1%E6%81%AF%E7%A2%8E%E7%89%87%E5%8C%96%E7%9A%84%E6%97%B6%E4%BB%A3%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%9C%89%E9%80%BB%E8%BE%91%E7%9A%84%E6%80%9D%E8%80%83%E4%B8%8E%E8%A1%A8%E8%BE%BE/</guid>
      
        <description>&lt;p&gt;我相信很多人都曾有过下图中描述的经历：自己脑子里明明有一大堆东西，有很多话想说，可是话到嘴边就是说不出来，最后脸憋得通红气得跺脚甚至能急出眼泪来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201603/2016_03_15_01.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这种情况一般出现在面试、写作、演讲、当众回答问题、向领导作报告等多种场合，很不幸的是，这样的场合一般是比较重要的场合，你在其中的表现往往能对你产生较深远的影响，一旦失败就一败涂地，基本没有补救的可能。&lt;/p&gt;

&lt;p&gt;我们假设一个人去参加面试时出现了上面的状况，一般情况下主考官会怎么想呢？他会认为你的心理素质不佳、语言表达能力薄弱或者从根本上直接否定你的能力，认为你肚子里什么东西也没有。&lt;/p&gt;

&lt;p&gt;那作为当事人的面试者会怎么想呢？他一般会十分懊恼，认为自己没有完全没有发挥出正常的水平，认为自己太过于紧张了，如果放松一点结果肯定会比现在好，或者他将自己的失败归结于极差的表达能力，认为其他人没有什么真本事却巧舌如簧能言善辩，自己就是嘴太笨了。&lt;/p&gt;

&lt;p&gt;事实真的是这样吗？让我们再回到最上面那张图中，仔细观察你就会发现这个人脑子里的内容虽然很多，但是是不成体系的、是混乱的，简直一团乱麻，这样的人看起来脑子里很多想法，但往往说出来是东一句西一句，东一榔头西一棒槌，让人摸不清头脑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么会出现这样的状况呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这就要“感谢”我们这个碎片化阅读的时代了，我们每天都会在社交网站、网络媒体上接触到大量的信息，但是这些信息是碎片化的，不成体系的，你并不能将这些七零八碎的东西有效整合、融合起来，其结果就是看起来你什么都懂，但没有一样精通。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;怎么办呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;读书。相较于社交媒体，书本是比较完善成体系的知识网络。但读书一定能杜绝碎片化吗？不一定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201603/2016_03_15_02.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上面这张图与第一张图形成了鲜明的对比，该图描述的便是有逻辑、系统化的思考方式，逻辑清晰，层次分明。&lt;/p&gt;

&lt;p&gt;其实在我们这个时代根本不可能从根本上拒绝碎片化阅读，既然碎片化阅读无法避免，&lt;strong&gt;我们就要想办法将碎片化的内容通过我们的思维体系加以整理、融合、吸收。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因此，我们需要是一套行之有效的思考方式，让我们混乱的思维变得清晰流畅，因为无论是演讲、面试还是写作，口头卡壳的根本原因在于你的大脑短路了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何有逻辑地思考和表达？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;答案很简单：想清楚，说明白，知道说什么、怎么说。&lt;/p&gt;

&lt;p&gt;与上面的答案相对应的，是要知道谁是你的听众？他们想听什么？他们想怎么听？&lt;strong&gt;这听起来是屁话，但真理往往听起来都是屁话。&lt;/strong&gt;我们都希望自己在表达时重点突出、逻辑清晰、层次分明，可是怎么才能做到呢？&lt;/p&gt;

&lt;p&gt;金字塔原理提供了一条可能的道路。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是金字塔原理？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;金字塔原理是一种重点突出、逻辑清晰、层次分明、简单易懂的思考方式、沟通方式、规范动作，其基本结构是：结论先行，以上统下，归类分组，逻辑递进；先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据。&lt;/p&gt;

&lt;p&gt;金字塔原理训练表达者要关注、挖掘受众的意图、需求点、利益点、关注点和兴趣点，想清楚说什么（内容），怎么说（思路、结构），掌握沟通的标准结构和规范动作。&lt;/p&gt;

&lt;p&gt;金字塔最终所要达到的效果是观点鲜明、重点突出、思路清晰、层次分明、简单易懂，让受众有兴趣，能理解，记得住。&lt;/p&gt;

&lt;p&gt;搭建金字塔结构的具体做法是：自上而下表达，自下而上思考，纵向总结概括，横向归类分组，序言讲故事，标题提炼思想精华。&lt;/p&gt;

&lt;p&gt;上面这一段的信息量极大，基本上概括了金字塔原理的全部精髓，这是我在《金字塔原理》这本书中摘取出来的最精炼的概括。金字塔原理是麦肯锡公司最重要的发明，也是这个公司一直践行的思维方式，作家冯唐就曾在麦肯锡工作，他曾在一篇文章中对金字塔原理做过经典的概括：&lt;/p&gt;

&lt;p&gt;金字塔原则就是，任何事情都可以归纳出一个中心论点，而此中心论点可由三至七个论据支持，这些一级论据本身也可以是个论点，被二级的三至七个论据支持，如此延伸，状如金字塔。对于金字塔每一层的支持论据，有个极高的要求：MECE（Mutually exclusive and collectively exhaustive），即彼此相互独立不重叠，但是合在一起完全穷尽不遗漏。不遗漏才能不误事，不重叠才能不做无用功。&lt;/p&gt;

&lt;p&gt;当然，普通人在学习、工作、交流中不可能完全按照严格的金字塔原理进行思考交流，但是这毕竟是一个大体的方向，绝大多数的问题只要按照金字塔原理加以组织表达，总不会太差的，一般不会出现思维混乱、脑子卡壳的状况。&lt;/p&gt;

&lt;p&gt;某种程度上来说，写作是最需要逻辑思维和系统思维的，因为如果不这样写出来的文章就会漏洞百出，难以让人信服。&lt;/p&gt;

&lt;p&gt;以我这篇文章为例，首先我意识到了一个大多数人都存在的问题，于是我想写文章帮别人解决这个问题，即金字塔原理中关注、挖掘受众的意图；其次我以接地气的故事案例开头，辅助以图片，提出这个问题；接着我探讨了为什么会出现这个问题；最后我提出解决这个问题的办法；如果该理论太过于晦涩担心读者看不懂，我加入了冯唐简明版的论述；最后我还担心你们看不懂，我以这篇文章的结构为例，为你们剖析一篇文章的逻辑结构。&lt;/p&gt;

&lt;p&gt;妈呀我真的好累……&lt;/p&gt;

&lt;p&gt;因此，很多人在看别人文章的时候回常常想，我也曾经这样想过呀你有什么了不起的，没错，是这样的。&lt;/p&gt;

&lt;p&gt;实际上从心理学的角度分析，你之所以喜欢某篇文章就是因为这种观念早已存在你的脑海中，&lt;strong&gt;只是没有系统表达出来，而写作者将其系统表达出来。&lt;/strong&gt;知乎上有个问题：为什么有的文章读起来感觉特别痛快，能把我的感觉，用我能听明白的话说出来，他们是怎么做到的？有个回答是这样的：&lt;/p&gt;

&lt;p&gt;因为ta们表达了你早就隐隐明白却怀胎三年如鲠在喉不吐不快却因语言组织能力或因环境无法表达出来的情绪或者事实……如同一个哑巴总算遇到手语翻译，如同便秘十天终于通畅……你感觉找到了知音，找到了组织，你原来不是一个人在战斗，你不是独一无二的傻瓜痛快，酣畅淋漓，爽，恩就是这样。&lt;/p&gt;

&lt;p&gt;所以，你跟写作者之间的区别就在于思维，你只能说出来一个结论，写作者却能完整论述，你说出来别人不信服，写作者能通过逻辑体系让你心服口服。&lt;/p&gt;

&lt;p&gt;任何认真的写作者都是值得尊重的，他们诉诸理性，但想尽办法不至于枯燥；他们想给你讲道理，但从不鸡汤；他们篇篇都是干货，从不写口水文……&lt;/p&gt;

&lt;p&gt;这就是我心目中优秀的写作者，也是我目前努力的方向，在情感鸡汤盛行的时代，我坚守这样的原则。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>不灌鸡汤，年龄渐长，技术人的发展之路该怎么走？</title>
      <link>/post/%E5%B9%B4%E9%BE%84%E6%B8%90%E9%95%BF%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%B9%B4%E9%BE%84%E6%B8%90%E9%95%BF%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BA%BA%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;技术圈中的很多人，最初都坚定地认为coding能改变世界。然而三五年过去后，还能不忘初心的人，少之又少。随着年龄的增长，梦想已被束之高阁，面包慢慢占据生活的大部分。对于个人发展，很多成功学者会给你灌各种鸡汤，但我们今天不这么做。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2012年的时候写过一篇叫《程序算法与人生选择》的文章，我用算法来类比如何做选择，说白了就是怎么去计算，但是并没有讲程序员可以发展的方向有哪些。 所以，就算是有这些所谓的方法论，我们可能对自己的发展还是会很纠结和无所事从，尤其是人到了30岁，这种彷徨和迷惑越来越重。&lt;/p&gt;

&lt;p&gt;虽然我之前也写过一篇《编程年龄和编程技能》的文章，但是还是有很多做技术的人对于自己能否在年纪大时还能去做技术感到没有信心。我猜测，这其中，最大的问题的是，目前从事技术工作的种种负面的经历（比如经常性的加班，被当成棋子或劳动力等等），让人完全看不到希望和前途，尤其是随着年纪越来越大，对未来的越来越没有信心。&lt;/p&gt;

&lt;p&gt;同时，也是因为在某大会上被问到，程序员老了怎么办？而在年底这段时间，也和几个朋友在交流中不断地重复谈到个人发展的这个话题。我的人生过半，活到“不惑”的年纪，自然经常性的对什么事都会回头看看总结归纳，所以，在交谈过程中和交谈过后，自己也有一些思考想记录下来。&lt;/p&gt;

&lt;p&gt;因为我本人也是在这条路上的人，所以，谈不上给他人指导，我同样也是在瞎乱折腾同样每天在思考自己要去哪儿的「一尘世间迷途老生」。况且，我的经历和眼界非常有限，因此，下面的这些关于个人发展的文字和思考必然是受我的眼界和经历所局限的。也欢迎大家补充和指正。&lt;/p&gt;

&lt;p&gt;这些东西不一定对，也不一定就是全部，期许可以让你在年底的时候有所思考，在明年的时候有所计划。&lt;/p&gt;

&lt;h4 id=&#34;一个重要阶段和标志&#34;&gt;一个重要阶段和标志&lt;/h4&gt;

&lt;p&gt;在讲个人发展之前，我需要先说一下人生中的一个非常重要的阶段——20到30岁！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个阶段的首要任务，就是提升自己学习能力和解决难题的能力。这是一个非常非常关键的时间段！这个时间段几乎决定着你的未来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;30岁以前，这个时间段，应该是人学习和积累的时间段，这个时间段，就是努力学习的时间段。这个时间段，你一定要把时间花在解决问题的技能上。就是说，你一定要练就成的技能是——你能解决大多数人不能解决的问题。使蛮力埋头加班苦干，当一个搬砖老黄牛的是肯定没有前途的。&lt;/p&gt;

&lt;p&gt;如果你不幸呆在了一个搬砖的地方，天天被业务压得喘不过气来，我建议你宁可让你的项目延期被老板骂，也要把时间挤出来努力学习基础知识，多掌握一些技术（很多技术在思路上是相通的），然后才能有机会改变自己目前的状况。因为，比起你的个人未来，项目延期被老板骂、绩效不好拿不到奖金，都不是什么事儿。&lt;/p&gt;

&lt;p&gt;总结一下，你在30岁前，工作5-7年，你需要拥有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效的学习能力。&lt;/strong&gt;这意味着——基础知识扎实、触类旁通、读英文文档不费劲、有寻找前沿知识的能力、能够看到问题和技术的本质、善于思辩、能独立思考。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;解决问题的能力。&lt;/strong&gt;这意味着——你要高效的学习能力、见过很多的场景、犯过或是处理很多错误、能够防火而不是救火。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你拥有这两个能力的现象是——&lt;strong&gt;在团队或身边的人群中的显现出Leadership。&lt;/strong&gt;Leadership并不是当领导和经理，而是一种特征，这种特征有如下两个简单的表象：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;帮人解问题。&lt;/strong&gt;团队或身边中大多数人都在问：“这问题怎么办？”，而总是你能站出来告诉大家这事该怎么办？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;被人所依赖。&lt;/strong&gt;团队或身边中大多数人在做比较关键的决定时，都会来找你咨询你的意义和想法。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一但你在在30岁之间出现了Leadership这样的特征，那么，你会进入一个正循环的阶段：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;因为你学习能力强，所以，你会有更多的机会解决难题。&lt;/li&gt;
&lt;li&gt;你有更多的机会解决难题，你就会学更多的东西，于是你就会更强。&lt;/li&gt;
&lt;li&gt;上面这个循环，只要循环上几年，就会让你人生的各种可能性大大的增加。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要达到这样的特质，需要找到自己的长处、以及适合自己的环境。就像鱼的特长是呆在水里，让鱼儿去追求陆上动物的刺激生活并不靠谱。&lt;/li&gt;
&lt;li&gt;一般说来，有这样的潜质的人，在学校中就应该要出现。如果你在大学中还没有出现这样的潜质，那么，你在工作当中要加倍努力了（注：所谓的加倍努力，不是让你使蛮力加班，而是让你多学习成长，使蛮力拼命是弥补不了能力、思维、眼界上的缺陷的）。&lt;/li&gt;
&lt;li&gt;Leadership也有范围的，比如，身边的朋友，工作中的团队/部分，圈内，整个行业。Leadership的范围越大，你的个人发展的选择性就越高。反之则越小。&lt;/li&gt;
&lt;li&gt;如果已到了30岁左右，还是没有出现这样的特征。那么，可能未来你也很难有这样的Leadership了。而你的人个发展的可能性可能也就不多了（sigh…）&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;读到这里，我必须要说一下，如果你已开始显现出你的Leadership，那么你才谈得上个人发展，这篇文章后续的内容也可能才会对你有意义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;个人发展的三个方向&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以我个人短浅的经历和视野，目前只看到的人的发展有如下三个大方向（他们之间可能会有重叠）：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在职场中打拼&lt;/li&gt;
&lt;li&gt;去经历有意义有价值的事&lt;/li&gt;
&lt;li&gt;追求一种自由的生活&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这三个方向，我个人或多或少都体验过，我也见过身边的很多人走这三个方向走的比较成功。也许还有别的方向，没办法，现在，我的视野就这么大，所以，我在这里，我主要就是谈谈这三个方向。&lt;strong&gt;Again，人有资格去走这三个方向的前提是——已有了上面我说的Leadership那种特质！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一、在职场中发展&lt;/p&gt;

&lt;p&gt;在职场中发展应该是绝大多数人的选择。通过加入公司来达到人生的发展。&lt;/p&gt;

&lt;p&gt;我们经常可以看到很多所谓的“职业规划”，但是大多数职业规划只不过人力资源搞出来的东西，和实际其实是有很大出入的。我的人生经历中，有18年左右是在公司中度过的，在过银行，小公司，大公司，民营公司，外国公司，传统IT公司，互联网公司，不同的公司完全有不同的玩法和文化，我的经历还算丰富，但也不算特别成功，这里只分享一些我在职场中的心得（不一定对，仅供参考）。&lt;/p&gt;

&lt;p&gt;\1. 去顶尖公司&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;去顶尖公司的一个目的就是让你的Leadership的范围的可能性扩大。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为公司和公司的差距也不小，所以，就算你在低端公司里是骨干份子，但在高端公司里可能只是一个普通员工（就像中国足球队的主力到了英超可能都无法入选）。所以，在职场中，如果你要让你的个人价值最大化的话，你一定要去顶尖的公司。因为顶尖公司里有非常不错的工作方法和场景，这并不是能看书或是交流得来的，这是必需要去亲身体验的。所以说，在顶尖公司掌握的技能，开阔的眼界，通常来说都会比低端公司的要多得多。&lt;/p&gt;

&lt;p&gt;另外，每个公司的工作级别都是有相互对标的，比如：阿里的P几对应于百度的T几。国内的一线公司职位还相当，但是如果和国外一线公司的比，那就有差距了，而且差距还很大。比如，Google或Facebook的某个高级工程师，可能就对应于阿里的P8/P9甚至更高。&lt;/p&gt;

&lt;p&gt;是的，对于职场来说，如果你在顶尖公司是骨干，那么，你去低端公司，则有很大机会会成为他们高管和核心。就好像你在Facebook里干三五年成为他们的技术骨干，那么你到BAT去成成为高管概率是非常大的。反过来，如果你毕业主去了BAT成为了一个螺丝钉，在天天加班中度过你的青春，你干个十年能成为BAT的高管的概率可能会非常的低。&lt;/p&gt;

&lt;p&gt;\2. 去真正的创业公司&lt;/p&gt;

&lt;p&gt;去顶尖公司和去创业公司在某些时候并不冲突。不过，这里我想讲的是，一个技术能力强的人在大公司可能会被埋没掉。因为大公司业务成功后，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;成功的公司在招聘各种高级技术人才都不会成为问题，于是少你一个不少，多你一个不多。&lt;/li&gt;
&lt;li&gt;成功的公司其整个技术体系已经完成，Legacy的问题也比较多，所以，可以供你发挥的余地不大。&lt;/li&gt;
&lt;li&gt;成功的公司更多的可能会想要稳定的系统，稳定必然会产生保守，而保守则产生不思进取。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，对于中高级人才来说，在大公司里的能产生的个人价值，可能远远不如那些求贤若渴、没有包袱、可以尽情施展、相对更为灵活和自由的创业型公司。&lt;/p&gt;

&lt;p&gt;不过，去创业公司需要小心仔细的挑选和评估，创业公司的不确定因素很多，也和创始人的因素太大了，所以，你需要小心了解创始人和他们的业务情况，想法和理念差不多才能更好的共事。&lt;/p&gt;

&lt;p&gt;好多创业公司其实并不是真正的创业公司，他们创业有很大的侥幸和驱利心理，要小心甄别。&lt;/p&gt;

&lt;p&gt;\3. 职业生涯的发展阶段&lt;/p&gt;

&lt;p&gt;首先，有一个不争事实——&lt;strong&gt;整个社会是会把最重要的工作交给30岁左右的这群人的。也就是说，30岁左右这群人是这个社会的做事的中坚力量。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以，这是一个机遇！如果你有了Leadership，你就一定能在这个有Leadership的范围内赶得上这个机遇——公司和领导对你寄于信任和厚望，并把重要的团队和工作交给你。&lt;/p&gt;

&lt;p&gt;于是，你的30岁到40岁就成了一个职业生涯的发展期，也就是你的事业上升期。如果你到40岁都没有赶上，那么你的职业生涯也就这样了，老有所成的人是少数。&lt;/p&gt;

&lt;p&gt;在你事业的上升期，你需要更多的软技能，比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;带领产品和业务的发展的能力&lt;/li&gt;
&lt;li&gt;推行自己喜欢的文化的能力&lt;/li&gt;
&lt;li&gt;项目管理的能力——在任务重、时间紧中求全&lt;/li&gt;
&lt;li&gt;沟通和说服别人的能力&lt;/li&gt;
&lt;li&gt;解决冲突的能力&lt;/li&gt;
&lt;li&gt;管理和发展团队的能力&lt;/li&gt;
&lt;li&gt;解决突发事件的应急能力…… ……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，你还要明白在职场里的几个冷酷的事实：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;你要开始要关心并处理复杂的人事。&lt;/strong&gt;尤其在大公司，大量的人都是屁股决定脑袋，利益关系复杂，目标不一致，每个人心里都有不一样的想法。这个时候再也不是talk is cheap, show me the code！而是，code is cheap，talk is the matter。你需要花大量的时间去思考和观察形形色色的人。需要耗费大理的精力在不同的人之前周旋，而不是花时间去创造些什么有价值的东西。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;你要开始学会使用用各种政治手段。&lt;/strong&gt;办公室政治不可避免，越大的公司越重，自从你开始成为一线的leader的那一天起，你就开始成为“里外不是人”的角色，需要在下属和领导，员工和公司之前周旋。随时你的级别越来越高，你需要使用更多的政治手段，你会学会审时度世的站队，学会迎合员工和领导，学会用官员的语言说话，学会此一时彼一时，学会妥协和交换，学会忍气吞声，学会在在适当的时机表现自己，学会在适当的时机在背后捅人刀子，学会波澜不惊，学会把自己隐藏起来……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;听上去真的好无聊，所以，你现在也明白为什么高层们都是些不做实事的人了，因为，他们要的就是这些职场里必需的技能！如果你不想或是也没有能力玩这些东西，那么你需要去那些可以让技术人员安安心心做技术的公司。这类的公司，我见过微软，Google、Amazon里都有。&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;技术人员在职场中的归宿有两条路 —— 到真正的技术公司成为一个专心做技术的人，或是在成为一个职业的经理人。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;二、追求人生的经历&lt;/p&gt;

&lt;p&gt;先说三个故事。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一个，是在阿里的时候，有一天在内网里看到一个贴子，一个做产品的女孩说自己准备离职要去法国学烘培厨艺，引得大家热评。&lt;/li&gt;
&lt;li&gt;第二个，是在亚马逊的美国老板，他每年都要去报个培训班学一个技能，比如：厨艺、开双翼飞机、夜总会里的DJ……、甚至去华盛顿去学当一个政客。&lt;/li&gt;
&lt;li&gt;第三个，是在汤森路透工作时，一个英国的同事，有一天他说他离职了，和自己的老婆准备用余生去周游世界，我问他是不是有足够多的钱了？他和我说，钱不够，他俩口子的计划是，边旅游边打工，打工打够到下一站的钱就走。他还说，那种用假期去另一个城市的旅游太没意思了，如果你不在那个地方生活上一段时间 ，你怎么能算是好的旅游体验呢？好吧，无法反驳。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我是觉得他们把自己的人生过得如此有意思，令我很佩服。虽然跨界跨得有点猛，但是 Why Not？&lt;/p&gt;

&lt;p&gt;在这里，我想说，去追求一种和众人不一样的人生经历也是一件挺好的事，我个人感觉，比起在职场里有趣的多多了。如果你厌倦了职场，其实为什么不去追求一下不同的人生经历呢。就算你不想去追求跨度比较大的人生经历，那么，在技术圈里，也有很多有价值有意思的经历也可以去的。&lt;strong&gt;追求刺激有意义的与众不同的经历的人，其实也能算是一种人生的成功，不是吗？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果只说技术方面，我个人看到的去追求经历的人，有两种追求的人其实也很成功的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;到技术创新的发源地去经历创新。&lt;/strong&gt;计算机互联网各种技术的创新引擎，基本上来说，就是在美国了。我们赶上了这个时代，也选对了这个时代最火热的行业，那么，有什么理由不去这个时代的技术发动机那里去经历呢？在美国硅谷，无论是大公司，还是创业公司，都在迸发着各式各样的创新，如果有能力有机会，为什么不努力去经历一下呢？不经历一下，你老了不会后悔吗？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;去经历下一个热点技术的发展。&lt;/strong&gt;从IT，到互联网、再到移动互联网、云计算、大数据，再到未来的AI，VR，IoT……，技术创新的浪潮一波接一波的过来，你是想在那继续搬砖搬下去，是想迎浪而上，去经历浪潮，还是想成为一个随波逐流的人？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;打工也好，创业也好，在国内也好，在国外也好，这些都是形式，不是内容。内容则是你有没有和有想法的人去经历有意义有价值事？人生苦短，白驹过隙，我们技术人员最大的幸运就是生在这样一个刺激的时代，那么，你还有什么理由不去追逐这些前沿刺激的经历呢？&lt;/p&gt;

&lt;p&gt;三、追求自由的生活&lt;/p&gt;

&lt;p&gt;我相信“自由”这个事，是所有人的心中都会想去追求的。“生命诚可贵，爱情价更高，…… ”（哈哈）&lt;/p&gt;

&lt;p&gt;但一说起自由，绝大多数人都想到的是“财富自由”，其实，并不完全是这样的，在自由的通路上，我个人的经历告诉我，其实，你会有很多的不同类型的自由。下面，是我对几个层次的“自由”的理解。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一层自由——工作自由。&lt;/strong&gt;人的第一层自由的境界是——“工作自由”，我到不是说你在工作单位上可以很自由，虽然有特例，但并不普遍。我想说的“工作自由”是——你不会失业危机感了。也就是说，你成了各个公司的抢手货，你不但不愁找不到工作，而且你是完全不愁找不到好工作。试想一下，如果是工作来找你，一方面，你就有真正意义上的工作选择权了，另一方面，你都不愁工作了，你完全就可以随时离职去干你想干的事了。此时，你就达到了“工作自由”。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二层自由——技能自由。&lt;/strong&gt;工作自由已是不错，不过前提是你还是需要依赖于别人提供的工作机会。而技能自由则是你可以用自己的技能养活自己，而不需要去公司里工作。也就是所谓的自由职业者了，社会上，这样的人也不少，比如，一些健身体育教练、设计师、翻译者、作者……这些都可以算是自由职业者，程序员这个职业中只要不是搬砖的，有想法的，就有可以成为自由积业者的潜质。&lt;/p&gt;

&lt;p&gt;想一想，你拥有的编程能力，其实是一种创造的能力，也就是创造力，只要你Make Something People Want（YC创业公司的slogan），你是完全可以通过自己的技能来养活自己的。如果你通过某些自动化的东西，或是你在App上做了一个软件个体户，让自己的收入不断，甚至你做了一个开源软件，社区每个月都给你捐款捐到比你打工挣的还多，那么你就真正的有了技能自由了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三层自由——物质自由。&lt;/strong&gt;我把财务自由换了一种说法。我个人觉得，除了有个好爸爸之外这种特例的情况，如果你想有物质自由的话，本质上来说，你一定要学会投资，投资不一定是你的钱，时间也是一种财富，年轻更是，你怎么投资你的时间还有你的青春？你要把你的投资投到什么样的事，什么样的人？对于投资这个事，风险也比较大。&lt;/p&gt;

&lt;p&gt;但是，人生不敢冒险可能才是最大的冒险。这个世界有很多技术不是你能看书学来的，而要只能在实战中学会的，比如：游泳。投资可能也是一种。只有真正懂投资的人，或是运气非常好的人，才可能实现物质自由。&lt;/p&gt;

&lt;p&gt;追求自由的生活，其实也是个人发展道路上的一个不错的选择。通常来说，自由的人，能力都不差，钱也不会少。因为，他们懂得投资。&lt;/p&gt;

&lt;p&gt;也就是说，拥有追求自由能力的的人，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不但有领导力和创造力（也可指导大多数人并走在大多数人前面）&lt;/li&gt;
&lt;li&gt;同时他还懂得怎么投资（知道时间和精力和金钱应该投在什么地方）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;写在最后&#34;&gt;写在最后&lt;/h4&gt;

&lt;p&gt;无论是在职场中打拼，还是追求精彩的经历，还是去实现自由，我觉得都是不错的个人发展的方向。&lt;/p&gt;

&lt;p&gt;他们都有重叠，比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;你可以在职场中去追求那些刺激的经历的公司。&lt;/li&gt;
&lt;li&gt;同样也可以通过加入有潜力高速发展的公司来达到自由。&lt;/li&gt;
&lt;li&gt;你也可以通过追寻不一样的经历来达到人生的自由。……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;总之，这里的逻辑是——&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;能够去规划自己的个人发展的人，通常都是有很多机会和可能性的人。&lt;/li&gt;
&lt;li&gt;有很多机会和可能性的人，通常都是有Leadership，喜欢冒险的人。&lt;/li&gt;
&lt;li&gt;有Leadership喜欢冒险的人，通常都是学习能力强，思维活跃，喜欢折腾，懂得“投资”的人。&lt;/li&gt;
&lt;li&gt;学习能力强思维活跃的人，通常来说，都是喜欢看书，喜欢实践和新鲜事物，不怕艰难和挑战，用智力而不是使蛮力的人。&lt;/li&gt;
&lt;li&gt;懂得“投资”的人，通常来说，他们更多的关注的是未来和长远的成长，而不是当下的KPI、奖金和晋升。&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>余生很长，要找个有趣的人在一起</title>
      <link>/post/%E4%BD%99%E7%94%9F%E5%BE%88%E9%95%BF%E8%A6%81%E6%89%BE%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%BA%E5%9C%A8%E4%B8%80%E8%B5%B7/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E4%BD%99%E7%94%9F%E5%BE%88%E9%95%BF%E8%A6%81%E6%89%BE%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E4%BA%BA%E5%9C%A8%E4%B8%80%E8%B5%B7/</guid>
      
        <description>

&lt;p&gt;王小波说：“一辈子很长，就找个有趣的人在一起。”&lt;/p&gt;

&lt;p&gt;容貌总会改变，面颊不可避免要松弛，可是对于生活的趣味则如同一技傍身，学习不来，学会了就丢不掉。 粗茶淡饭不要紧，朋友散场没关系，兵荒马乱也无所谓，和有趣的人在一起，一盏红烛，一杯烧酒，可饮风霜，可温喉。&lt;/p&gt;

&lt;h4 id=&#34;01&#34;&gt;01&lt;/h4&gt;

&lt;p&gt;晋人王子猷居山阴，一晚忽降大雪，子猷被冻醒，索性来到院中边饮酒边观赏雪景，不由得心绪起伏，吟起诗来。&lt;/p&gt;

&lt;p&gt;有趣的人，未必有多显赫的名声，但肯定潇洒脱俗。&lt;/p&gt;

&lt;p&gt;这种潇洒脱俗怎么定义呢？比如说一日坐公车回家，不料坐反了公车，却也没有影响心情，随性游览陌生的地方，有了一段不期而遇的惊喜。&lt;/p&gt;

&lt;p&gt;特别记得大学的时候，和几个校友约着从学校骑车去大观楼公园游玩，半路突遇暴雨，还是一群落汤鸡有说有笑去了大观楼，然后跑去玩水了，特别开心的一天。 我想如果没有这种潇洒脱俗的作乐精神，发生这些事就又是截然相反的一个结果了。&lt;/p&gt;

&lt;h4 id=&#34;02&#34;&gt;02&lt;/h4&gt;

&lt;p&gt;《窃听风云3》上映前，周迅在一次采访中说：“我很好奇为什么很多人追问我在片中戏份有多少？对我来说，与谁拍戏比戏份重要，生命就这么长，要和有趣的人一起度过。”周迅口中有趣的人，不只是《窃听风云3》中的老搭档，还有她甜蜜依偎着的高圣远。&lt;/p&gt;

&lt;p&gt;特别喜欢周公子灵气劲儿，随性、洒脱、直率而有趣。只有这样的周公子在经历七场恋爱后才能有情人终成眷属。&lt;/p&gt;

&lt;h4 id=&#34;03&#34;&gt;03&lt;/h4&gt;

&lt;p&gt;一次与友人聊天，谈及对一个人的至高评价是什么？我答：“有意思。”无独有偶，不久前读到一名流的文章，说在对交往对象的最高评价这个事情上，几位好友的观点竟出奇的一致，无外乎“这是一个很有意思，很精彩的人”。顿时，共鸣感铺天盖地。&lt;/p&gt;

&lt;p&gt;用这样的标准来判断是否值得将一个人纳入自己的朋友圈，或者长期交往，在一般人眼中或许稍显功利。在我看来，却是门槛最低的交友原则。&lt;/p&gt;

&lt;p&gt;有意思的人常常是睿智、诙谐的，通俗说来就是，让人觉得可爱。与这样的人交往，仿佛一扇新世界的大门被打开，不同的视角、独特的想法、新奇的灵感，源源而来；即便相悖的意见，也能在碰撞间迸发出奇妙的火花。&lt;/p&gt;

&lt;h4 id=&#34;04&#34;&gt;04&lt;/h4&gt;

&lt;p&gt;日语中有个词，叫做成田分手。说的是日本很多新婚夫妇结束蜜月旅行后，随着飞机降落成田机场，二人关系也以分手收尾。&lt;/p&gt;

&lt;p&gt;其实早在《围城》里，大智大慧的钱老先生已经借赵辛楣之口说过：“结婚以后的蜜月旅行是次序颠倒的，应该先共同旅行一个月。一个月舟车仆仆以后，双方还没有彼此看破，彼此厌恶，还没有吵嘴翻脸，还要维持原来的婚约，这种夫妇保证不会离婚。”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201601/2016_01_26_01.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;沧桑岁月的损耗对象不仅是容颜，还有激情。如何在茶米油盐的琐碎里依旧“相看两不厌”，如何在桑田变幻以后，纵然面对白发与皱纹，依旧怦然心动，对彼此的兴趣是关键。无聊乏味的伴侣，毫无疑问，将不可挽回地把生活推向庸俗与索然。&lt;/p&gt;

&lt;p&gt;一个有趣的人，他不一定必须具备深厚的学识，但他的内心必然是丰富的；他不一定走过很多的路，但他的生命中必然一直有故事在发生。&lt;strong&gt;在这个如林的世界里，永远不缺少各式各样的人，可唯独，有趣的，最难遇到&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;希望有一天，你我都能与“自我”以外的他人世界发生一场异彩纷呈的相逢；也希望有生之年，你我能有幸成为彼此太长生活里有意思的那位。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>大多数人都是如何挥霍掉自己的天赋？</title>
      <link>/post/%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E9%83%BD%E6%98%AF%E5%A6%82%E4%BD%95%E6%8C%A5%E9%9C%8D%E6%8E%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A9%E8%B5%8B/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E9%83%BD%E6%98%AF%E5%A6%82%E4%BD%95%E6%8C%A5%E9%9C%8D%E6%8E%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A9%E8%B5%8B/</guid>
      
        <description>

&lt;h4 id=&#34;一-努力-到底是不是天赋&#34;&gt;一、努力，到底是不是天赋&lt;/h4&gt;

&lt;p&gt;要论天赋如何发挥，我们先要搞清楚什么是天赋。&lt;strong&gt;80% 以上的人，对天赋的理解基本都是错的，至少存在以下三个误区：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.  认为天赋是能力：但实际上，天赋只是潜力&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在说天赋的时候，我们常常会想到莫扎特。他 14 岁的时候，在教堂听了一首经文歌的演唱后，就能凭记忆把它全部默写出来，这首歌大概有两分钟，而且有好几个声部。这完全是天生的吗？不完全是。在他 6 岁的时候，他就已经完成了 3500 小时的练习，而且是在他父亲的指导下。他的父亲是一位音乐家，还曾出版《小提琴奏法》，他放弃了宫廷乐师的工作，将全部精力用在莫扎特身上。&lt;/p&gt;

&lt;p&gt;但是，倘若让我们也练习那么长时间，就可以达到莫扎特的天才程度吗？很大可能不会。所以，&lt;strong&gt;所谓天赋，指的是某种天生的特性，让一个人可以在同样起点的情况下，比一般人更加快速地成长。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;也就是说，在某个领域内天赋高的人与该领域里的一般人，他们的努力与水平之间的关系，类似于下图两条实线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201610/2016_10_16_01.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但是我们大多数人，往往以为天赋=能力，以为天赋是那条虚线，以为只要有天赋，那么不需要努力就可以达成结果。实际上，&lt;strong&gt;天赋只代表一种潜力，是否能够转化为能力，则是需要后天刻意练习的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;《异类》、《一万小时天才理论》等书中，早已揭示了心理学家关于“高手是如何炼成”的研究结果，那就是，天赋是需要后天开发的，就是所谓“刻意练习”（deliberate practice）。所以，天赋经过刻意练习，才能转化为能力。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.  天赋不行，努力来补：但实际上，努力也是一种天赋&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;天赋包括能够帮助一个人更快速成长的所有天生特性。而一个人要能够更快地成长，其实需要两个要素，一是能力方面的天赋，也可以称为潜力；二是意愿方面的天赋。&lt;/p&gt;

&lt;p&gt;我们在谈天赋的时候，往往只说了前面一个要素，而忽略了后面的要素。举例来说，如果一个人天生更加有同理心，他当然能够更好地与他人沟通，但是，如果他性格并不喜欢与人沟通，也没有动力去开发自己的沟通能力，那么很可能也不会比一般人成长更快。所以，意愿的很大一部分也是天赋。&lt;/p&gt;

&lt;p&gt;从这个角度来说，&lt;strong&gt;“努力也是一种天赋”这句话就有其合理性了。因为，努力代表着一种意愿，背后是由性格、动机、价值观等等来决定的，而这些都是天生的特性。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201610/2016_10_16_02.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;天赋包括能力天赋以及意愿天赋两个方面。&lt;/strong&gt;这可能是一个让人有点绝望的发现。但是，这是否意味着，我们就放弃了呢？恰恰相反，&lt;strong&gt;我们更应正确地将天赋应用到适合的领域，才有做成事情的可能性。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  天赋离一般人很远：但实际上，每个人都有天赋&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为什么说，每个人都有天赋呢？从意愿天赋来说，每个人都有自己的性格、动机和价值观，当然也就有自己独特的天赋。&lt;/p&gt;

&lt;p&gt;从能力天赋来说，这句话也是成立的。为什么呢？因为我们每个人在不同领域上的潜力是不同的，我可能更有人际敏感度，你可能更有数据敏感度，他可能在乐感方面更加擅长。&lt;/p&gt;

&lt;p&gt;我们或许没有像莫扎特一样出众的音乐天赋，也没有像爱因斯坦那样的高智商。然而，我们忽略了相对天赋的概念。也就是说，&lt;strong&gt;跟你自己相比，你在A方面是比B方面更有潜力的，那么你花同样的时间，在A方面是比B方面成长快很多的&lt;/strong&gt;，如果选择一个能利用A方面天赋的领域，你会起到事半功倍的效果。&lt;/p&gt;

&lt;p&gt;从这个角度来说，我们每个人都有天赋，也都需要利用天赋。&lt;/p&gt;

&lt;h4 id=&#34;二-天赋到结果之间-有多少条岔路&#34;&gt;二、天赋到结果之间，有多少条岔路？&lt;/h4&gt;

&lt;p&gt;要知道如何正确发挥天赋以达成最终的结果，我们就需要先来看看，天赋跟结果之间，是怎样一种关系，我用树形图来做个分解。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201610/2016_10_16_03.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;首先，事情的结果取决于两大方面，一是内部因素，即你做了什么，二是外部因素，即你的运气等。抛开运气、机遇这类很难掌控的要素，我们来看内部因素，也就是你的行为。行为取决于什么呢？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个人的行为取决于三个要素：知、能、愿。也就是说，当你知道当前的岗位/角色应该做什么，也有能力可以做成，同时又有愿望去做，那么好的行为就发生了。&lt;/strong&gt;举例来说，你是公司的产品经理，你正确地认知到产品经理应该做的事情，并且有能力完成，同时也很有意愿去做，那行为就是好的，但至于能否做成，还取决于一些外部要素。&lt;/p&gt;

&lt;p&gt;角色认知这方面，天赋不起主要作用，所以这条线暂且不细分。&lt;/p&gt;

&lt;p&gt;能力和意愿都跟天赋有很大的关系，所以继续细分。这里，我&lt;strong&gt;将能力和意愿，分别分成先天和后天的部分。&lt;/strong&gt;也就是说，能力取决于先天的能力天赋以及后天的刻意练习。而&lt;strong&gt;意愿，也取决于先天的意愿天赋以及后天的环境和经历。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关于能力取决于天赋和刻意练习，我们在前文已经说过，这里说说意愿的先天和后天因素。举例来说，你天性是喜欢学习新东西的，然而周围环境并不鼓励，大家也都毫无上进心，那你的学习意愿也会降低。所以，意愿是有先天和后天因素的。&lt;/p&gt;

&lt;p&gt;另外，关于刻意练习，我仍然将它继续细分，成为练习的方法以及练习的热情。方法是说，你知道如何进行刻意练习。而热情是说，你是否对刻意练习充满热情，因为刻意练习是一项艰辛的事情，是一个不断行动、犯错、反馈、调整的过程。倘若没有足够的热情，我们也是很难持续下去的。&lt;/p&gt;

&lt;h4 id=&#34;三-大部分人-都在挥霍自己的天赋&#34;&gt;三、大部分人，都在挥霍自己的天赋&lt;/h4&gt;

&lt;p&gt;所以，我们现在知道，天赋如何作用于结果，过程中会有哪些岔路了。但从我的观察来看，&lt;strong&gt;大部分人都在这个作用过程中，挥霍掉了自己的天赋。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;挥霍方式1：用错地方&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;天赋用在不同的领域，效果是不一样的，我们用如下的矩阵图来看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201610/2016_10_16_04.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;维度一是天赋的差异性，也就是说，这个领域之内，天赋高和天赋低的人，结果有多大差异。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如，你的天赋是数据敏感度强，如果用在数据统计这个领域，差异就不会很大，因为一个数据敏感度不强的人，做好数据统计这项工作，并不会比你多花费多少时间。但是，如果用在咨询领域，作为一个分析师，那么天赋的差异性就会很大，数据敏感度弱的人，确实会花费比你多很多的时间，来达到跟你一样的水平。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;常常被忽略的是维度二，天赋的决定性。在一些领域，虽然天赋的差异性明显，但天赋的决定性并不强。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如，数据敏感度强的人，在咨询领域，当然是会有明显的差异，然而，对于咨询工作来说，需要的是综合性素质，比如解决问题、沟通、团队合作、计划等等，即便另一个人数据敏感性并没有那么强，但若在其它方面优势明显，那么你也未必占得很多先机。但是，如果你把数据敏感度强的天赋，用在大数据分析领域，那就占得先机了，因为这一项天赋对于该领域的成功，是有决定性作用的。&lt;/p&gt;

&lt;p&gt;因此，本质上维度二看的是，这个天赋是否是该领域内的关键成功要素。&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;综合这两个维度来看，你的天赋需要用在这样的领域：第一，这个领域内，是否有这项天赋，结果的差异性较大；第二，该天赋是该领域的关键成功要素。&lt;/strong&gt;如果用错地方，天赋的作用当然就无法完全发挥出来。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;挥霍方式2：缺乏正确的方法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这两天不在上海，在外地，刚巧男足国家队这两天也在这家酒店。提到男足，想起球迷常常感叹的一句话：中国 10 几亿人，居然找不到 11 个足球天才。然而经过前文的描述，大家都知道：不是找不到天才，而是天才需要刻意练习。&lt;/p&gt;

&lt;p&gt;为什么乒乓球总是中国人打得好，跳水也总是中国队员的优势项目？难道中国人在乒乓球和跳水方面有天赋？当然不是。实际上，这正是正确训练方法的体现。这些优势项目，从国家队到基层，教练水平都是很高的。在这些项目中，都是中国向国外输出教练的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一万小时天才理论中，我们往往过于关注“一万小时”，常常忽略了这一万小时的具体内容，那就是“正确的刻意练习方法”。&lt;/strong&gt;所以，掌握不了正确的刻意练习方法，天赋是很难变成能力的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;挥霍方式3：缺乏热情的滋养，开发动力不足&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;刻意练习的过程是艰辛的&lt;/strong&gt;，根据心理学家 K. Anders Ericsson 的说法，它&lt;strong&gt;不是重复你已经掌握了的内容，而是去挑战难度更高的内容。&lt;/strong&gt;所以，维持刻意练习的热情，才有可能让我们一直进行这项艰辛的活动。可是，热情从哪里来呢？很多人都认为是爱好，实际上，爱好是被扭曲最多的一个概念。&lt;/p&gt;

&lt;p&gt;大多数人认为，爱好是一个神奇的事物，能够让你爱上某项工作、孜孜不倦、不知疲惫，最后取得成功。实际上，你去问一个人的爱好是什么，多半会回答音乐、画画、做手工艺……是的，都是业余爱好。似乎没有多少人天生爱好销售、咨询、创业这些跟工作相关的内容。但是，为什么很多人工作起来，热情比自己的业余爱好还大呢？&lt;/p&gt;

&lt;p&gt;因为，&lt;strong&gt;热情并不来源于爱好&lt;/strong&gt;。根据自我决定理论，&lt;strong&gt;热情来源于自主感、胜任感、归属感&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201610/2016_10_16_05.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;胜任感和归属感我们都可以理解，你能够做好一件事情，当然会更有热情，你共同做事的同伴或者环境，让你有归属感，当然也会让你更有热情。但我想说的是，很多人都忽略了自主感。做同样工作、担同样责任的情况下，如果可以让你自主安排工作时间、做事方式、合作方式，你会更有幸福感，工作也会更加积极和投入。当然，对于你的雇主来说，你的能力越强、能力越稀缺，它能给你的自主权就会越大。&lt;/p&gt;

&lt;p&gt;在之前的咨询公司待了 8 年，很多猎头给我电话，第一句就问：待这么多年，为什么不去甲方呢？可以更加轻松、收入更高。几乎唯一的答案就是：自主感。我可以安排自己的工作时间、在一定范围内选择合适的团队成员、用自己觉得对的方式为客户提供咨询服务，这些，无论哪个甲方都不可能提供的。&lt;/p&gt;

&lt;p&gt;所以，如果你没有热情，不妨想想看，是哪里出了问题，是缺乏自主感、胜任感还是归属感？由不自主、挑战过大、缺乏归属所造成的热情不高，也是我们发挥天赋的一大障碍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;挥霍方式4：被世俗需求扭曲&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;几年前，刚带项目的时候，我有些不知所措。比如，我不知该如何表现，才能够显得更加成熟与可信。于是，我就去模仿公司里面的资深顾问。&lt;/p&gt;

&lt;p&gt;观察了我欣赏的一位女性合伙人，我发现，她的风格非常张扬。比如，她十分强势，常常因为不同意见，跟客户吵起来。再比如，进项目没几天，她就跟客户从上到下都建立极好的私人关系。我就开始研究她的行为，试图通过模仿来帮助自己提升。然而，这种模仿宣告失败，我实在很难做到，因为我们的性格、阅历甚至气质都差异太大了。&lt;/p&gt;

&lt;p&gt;后来，有位相熟的客户跟我说：刚见面的时候，觉得你说话语气太平静了，一点不像其他顾问那么有激情，但后来发现，你总能一下子看到问题所在，所以你每次说话，我们都停止讨论，竖起耳朵听。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;每个人的天赋不同，所以自我定位也必然不同。忽略自己的天赋，而去模仿他人，是性价比最低的努力方式。&lt;/strong&gt;不光在如何定位自己这方面，我们会盲目模仿、与他人比较，浪费自己的天赋。在职业选择中，也是如此。比如，我们认为金融行业更加高大上，所以就去做金融，我们认为创业很有逼格，就又去创业。但是，从未认真考虑过，这些世俗眼中的光鲜职业道路，是否适合我们。&lt;/p&gt;

&lt;p&gt;倘若这与我们的能力天赋以及意愿天赋都有很大的违背，即便进入世俗眼中的成功轨道，我们也会感到非常艰难，进而又会在与他人的比较中，陷入焦虑和自我怀疑的循环，也会在此过程中，任由自己的天赋被浪费。所以，&lt;strong&gt;如果不能够坚定地拒绝那些世俗光鲜的追求，你在天赋开发的道路上，会离正确轨道越来越远。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;挥霍方式5：被后天环境埋没&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们都有这种体会，去一些政府机构办事，工作人员就像看到债主一样，负能量爆棚。我曾经一度也觉得非常奇怪：要说是因为服务意识，但正常人谁愿意整天发脾气？要说是个人原因，难道招聘的时候只要脾气差的人？后来我渐渐发现，其实是工作环境带来的影响。一则周围人都是如此，你并不会觉得有什么不对；二则每天大量的重复性工作以及扑面而来的各种重复问题，让人的能量被消耗殆尽。&lt;/p&gt;

&lt;p&gt;我们常常可以在跟一个人聊几句之后，就能判断他的职业。比如，一个说话语速超快、逻辑严密的人，你会判断他是咨询顾问；一个鸡血满满、热衷鸡汤、对陌生人超乎寻常热情的人，你会判断他是某保健品销售；一个说话官腔、衣着正式的人，你会判断他是体制内人士……&lt;/p&gt;

&lt;p&gt;这些判断肯定不完全正确，但确实体现了从事这些职业的一些人的特征。是这样的人选择了这样的职业吗？很大程度上不是，而是职业所处的环境改变了这些人。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一个内容单一且每天重复的工作，会导致你主动思考能力的下降；一个流程非常规范和标准的工作，会导致你挑战和克服困难精神的丧失；一个每天跟机器打交道的工作，会导致你社交能力的减弱；一个不鼓励自主学习、主动担责的工作，会导致你失去努力的内在动力……&lt;/strong&gt;这些，都是后天工作环境对一个人能力的影响。&lt;/p&gt;

&lt;p&gt;所以，你选择怎样的工作环境，也决定了你的天赋是否可以充分发挥作用。&lt;/p&gt;

&lt;h4 id=&#34;四-总结-别亲手埋葬了自己的天赋&#34;&gt;四、总结：别亲手埋葬了自己的天赋&lt;/h4&gt;

&lt;p&gt;最后，总结一下，我们不妨用以下几点做一个反思，看看自己的天赋如何能够更好地发挥作用：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每个人都有自己的相对天赋，忽略自己的天赋，会事倍功半&lt;/li&gt;
&lt;li&gt;天赋包括能力天赋和意愿天赋，所以，在总结和反思自己的时候，要回顾这两点&lt;/li&gt;
&lt;li&gt;能力天赋只代表潜力，要转化为能力，还需要刻意练习，而刻意练习不是重复已经会的内容，而是挑战不会的内容&lt;/li&gt;
&lt;li&gt;正确运用天赋需要做到：1）找到天赋差异性大且决定性强的领域，2）掌握正确的刻意练习的方法，3）找到能有更多自主感、胜任感、归属感的工作以维持热情，4）坚定地拒绝那些世俗眼中的光鲜追求，5）避免选择那些容易埋没天赋的工作&lt;/li&gt;
&lt;li&gt;另外，关于刻意练习、找到天赋这些话题，因为太长了，以后会陆续展开来写。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>活着却没有心苦，才是真正的胜者</title>
      <link>/post/%E6%B4%BB%E7%9D%80%E5%8D%B4%E6%B2%A1%E6%9C%89%E5%BF%83%E8%8B%A6%E6%89%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%83%9C%E8%80%85/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E6%B4%BB%E7%9D%80%E5%8D%B4%E6%B2%A1%E6%9C%89%E5%BF%83%E8%8B%A6%E6%89%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E7%9A%84%E8%83%9C%E8%80%85/</guid>
      
        <description>&lt;p&gt;泰国 KhyaoYai(动中禅）阿姜甘澎&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.nowamagic.net/librarys/images/201404/2014_04_20_03.jpg&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;\1. 期待修习的结果也是一种欲求，欲求之念正是苦的根源。放掉欲求，只是简单觉知，不必严肃与紧绷，把实践当作一场游戏。&lt;/p&gt;

&lt;p&gt;\2. 觉知时，&lt;strong&gt;自然的知道即可。无须用力，用力只会让心内收。&lt;/strong&gt;一般人的心向外驰，散乱而不自知。&lt;strong&gt;习练者则易将心内摄，这是另一极端&lt;/strong&gt;。（编者注：用力将心内摄指的是用力专注，是舍摩他。不要把纯观当成舍摩他来修，二者是不同的结果。不要误认为坐着不动闭上眼睛才是舍摩他，睁开眼睛的任何动作都可以修成舍摩他。这和心的态度有关和身体姿势动作无关。）&lt;/p&gt;

&lt;p&gt;\3. 心的自然状态既不朝内也不朝外，而在中道。然而当你发现心向外驰或向内收时，也不用提醒自己回到中道，因为提醒只是个（想法）念头而已。外驰时，知道外驰；内收时，知道内收。知道就可以了；觉知到，就放掉。法喜也好、汹涌之念也好，保持对一切的了知，心会自己回到中道，无须念头的引导。&lt;/p&gt;

&lt;p&gt;\4. 别跟心情吵架，只要及时认清心情的发生是念头所造的。渐渐的，觉性与心情就会分开。这种分开不是造作出来的，是觉性累积以后自然发生的。有这样的结果，是因为你理解到念头只是自然现象，只是一种事实，无须消灭也无须跟随，它自己会改变。觉知，并且不执于能知的心。&lt;/p&gt;

&lt;p&gt;\5. （动中禅的）手部动作或是经行，并不算是修行。那么修行是什么呢？是始于看到念头。（编者注：动中禅不主动去看念头，觉知能力强大到了一定程度，细微的心念无处可藏，是自然的看到念头。这样就善巧的避免了观心念的时候难以掌握的平等心。）&lt;/p&gt;

&lt;p&gt;\6. （能知的）心和（被觉知的）身，本就是分开的，是念头让它们搅在一起。如果不被念头所扰，就会看到心和身本就是分开的。(编者注：实修的时候，不要去暗示心和身是分开的，当下有什么如实的感受？目前可以感受到的什么？才是你自己的当下如实观。不是想象的，预判的。分开是果，是自然的会看到的，不是暗示想象的。请注意，理论层面和实修操作层面的不同。）&lt;/p&gt;

&lt;p&gt;\7. 同样，心和念头也是分开的。当你经验到心和念头是分开的，随念而起的感受、情绪乃至种种境界，都会成为心所觉知的对象。最后，只剩下能知的心；继而你发现，能知的心也是无法把持的，这个“观者”也是生灭的，不是“我”也不是（属于）“我的”。&lt;/p&gt;

&lt;p&gt;\8. 所观的对象以及能观的心，里面都没有一个“我”，都只是自然现象。没有“我”，只有现象与过程；对一切均无执着，才有自由与自在。&lt;/p&gt;

&lt;p&gt;\9. “身苦”是一种不由自主的逼迫，所有的动作都源于身的不适。试试保持身体不动，看看能坚持多久，然后去觉察心中想动的意欲，就会看到想动的意欲是被身体的不适感所逼迫的。&lt;/p&gt;

&lt;p&gt;\10. 粗显的念头之下，有更多不由自主的念头潜流，这些“想”从未停止，同样逼迫着精神之苦。觉知到念流，你才会明白“想”是多么累人。同时也会发现无法停止它，因为它不是“你”，也不属于“你的”。由此，又再次回到纯然的了知。&lt;/p&gt;

&lt;p&gt;\11. 无论你知道多少关于“觉知”的理论，也不如实际发展一刹那的觉知来得有用。把觉知带到每一刻，让它融入生活。佛法不是用来教育别人的，而是用来自证自知的。你无法把它给予别人，但是任何人发展正念觉知到终点，便会看到实效：活着却没有心苦——这是真正的胜者。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>珍惜那个秒回信息的人</title>
      <link>/blog/%E7%8F%8D%E6%83%9C%E9%82%A3%E4%B8%AA%E7%A7%92%E5%9B%9E%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BA%BA/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/%E7%8F%8D%E6%83%9C%E9%82%A3%E4%B8%AA%E7%A7%92%E5%9B%9E%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BA%BA/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这个时代，人们面对面相处的时间越来越少，对重要的人能秒回是一种极大的在乎。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;01&#34;&gt;01&lt;/h2&gt;

&lt;p&gt;随着年龄的增长，我们渐渐的忙于生计，疲于奔波。不管恋人也好，朋友也罢，能够面对面在一起的机会已经不像学生时代那般充裕。所以，我特别珍惜相处的时间，也特别理解别人不能及时回复我的苦衷。我们在忙得不可开交的时候，来了一条信息，经常看一眼手机搁那儿，转头就忘记回复了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;假如一个人能秒回我的信息，我在那个人心里的分量有多重自然成了一种真真切切的感受，我知道ta是在乎我的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;记得一个月以前有读者跟我说了这样一个情况：男朋友总是抱怨她不能及时回复信息，最近更是因为这个原因两人打起了冷战。&lt;/p&gt;

&lt;p&gt;我说：及时回信既是两个人在一起的责任也是义务，你是我的对象，我当然希望知晓你的情况。人总有忙时，没人会指望你每时每刻都能秒回。但是假如你愿意抽出一点时间，给一句回复，哪怕只有那么几个字、一句话，对方的心里总是安乐的。&lt;/p&gt;

&lt;p&gt;假若能够秒回那便更好，因为这是忙碌生活中一种极大的在乎，&lt;strong&gt;更是让感情保鲜的安全感。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;02&#34;&gt;02&lt;/h2&gt;

&lt;p&gt;其实，让你在乎的人等待或是等待你在乎的人，都不是一件好受的事情。&lt;/p&gt;

&lt;p&gt;记得我约会等女朋友最长的一次，等了一个多小时。对于许多人来说，这个等待的时间或许并不算长，然而我却忘不了。&lt;/p&gt;

&lt;p&gt;那天约好，我便先出门了，后来大雨滂沱，到地儿发现她没到。我给她发消息说，是不是下雨出不来？她说，雨太大，她爸不让她出门。我说，那干脆算了，反正这么大雨，在家休息也好。她不肯，非要出来，每几分钟就发一条信息安慰我。&lt;/p&gt;

&lt;p&gt;一个多小时后，她一脸委屈，半身淋湿跑到我面前。她说她是哭着求她爸开车送她过来的，说着说着眼泪又下来了。我说你咋又哭了，她说让你等那么久心里难过。我看着她又好气又好笑，但是心里更多的是感动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是啊，真正爱你的人又怎么愿意让你在枯等里徘徊。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有句话是这样说的：等待，因其有所希冀而令人兴奋，而又因等待的过程无所安排而使人百无聊赖。正是这样的百无聊赖，你才更加应该懂得：不要总是让真正在乎你的人在等你，因为往往他们也舍不得让你等。&lt;/p&gt;

&lt;p&gt;《金镂衣》诗云：花开堪折直须折，莫待无花空折枝。&lt;strong&gt;等得久了，感情就淡了。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;03&#34;&gt;03&lt;/h2&gt;

&lt;p&gt;翻相册的时候，找到了一个珍藏了5年的故事，当然不是我的故事，可我却想与你们分享。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那天老师谈起人际关系的时候，说起了他和他朋友们的故事。&lt;/p&gt;

&lt;p&gt;他说：很多时候，我们拿起话筒总是发觉无话可说，于是，每当我想他的时候，我就拿起手机，响他两声，然后挂掉。至于对方也是如此。这种习惯一直持续到现在。&lt;/p&gt;

&lt;p&gt;听了这段话，心头莫名感动。竟也拿起电话给几个因为时间空间拉开距离的朋友打去。随后我想，或许我和他们并没有老师和他朋友那般的默契。&lt;/p&gt;

&lt;p&gt;于是就给他们在短信里写道：老师说，只要你想一个人了，就响两下ta的手机。不一会儿，他们都回信息了。看着屏幕上的内容，我知道他们一定感动了，或许此刻脸上正洋溢着笑容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个故事就好像秒回一样。当我给关系要好的朋友发信息时，他们总能秒回。&lt;strong&gt;这是一种感情上的默契，更是一种表达最简单的心有灵犀。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;04&#34;&gt;04&lt;/h2&gt;

&lt;p&gt;昨晚朋友发来消息，我第一时间就回复了她。因为已是深夜，她很惊讶我能秒回。&lt;/p&gt;

&lt;p&gt;于是发了个朋友圈圈上我：高中时曾经网恋，那时学校不让带手机，于是自作聪明把手机塞在透明的眼镜盒里，一有信息，透过眼镜盒就能发现屏幕亮了，这样就可以第一时间收到爱的信号。可是长大后发现，朋友圈里的人很多，但真正愿意秒回你的人却很少。如果你和一个人可以互相秒回，那么，世界这么大，人山人海，我想，遇见，就是一件很幸运的事儿。&lt;/p&gt;

&lt;p&gt;我把聊天置顶只为了第一时间能看到他们的消息，然后能及时回复他们。&lt;/p&gt;

&lt;p&gt;有事没事第一时间回复，快乐一起分享，坎坷不让你担忧。若是你我都很好，没有太多的话想说。那么哪怕只是一个表情，三言两语，我知道，我想他们的时候，他们也都想着我，便也知足。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;秒回的意义在于，即使距离再远，我们的心依然能那么近。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;05&#34;&gt;05&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近总是在听苏打绿的《独处的时候》：独处的时候，尽管所有情绪都逃逃逃不开。独处的时候，还是要勉强自己想得开。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个人的等待总是千头万绪，带着一点不安的小脾气。若是我发你消息的时候，你能秒回，那么所有的烦恼都会烟消云散。&lt;/p&gt;

&lt;p&gt;我不用安慰自己，你也许只是忙。我不用安慰自己，你也许手机没电了。我不用安慰自己，你在朋友聚会时忘了我。我不用勉强自己要想开。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;心里时刻装着你的人是宝贵的，不管朋友还是恋人，找一个能秒回的人在一起，珍惜他们。&lt;/strong&gt;因为，他们才是张爱玲所说，在无涯的时间荒野里，没有早一步也没有晚一步，那个和你刚刚好的人。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>珍惜那个秒回信息的人</title>
      <link>/post/%E7%8F%8D%E6%83%9C%E9%82%A3%E4%B8%AA%E7%A7%92%E5%9B%9E%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BA%BA/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/%E7%8F%8D%E6%83%9C%E9%82%A3%E4%B8%AA%E7%A7%92%E5%9B%9E%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BA%BA/</guid>
      
        <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这个时代，人们面对面相处的时间越来越少，对重要的人能秒回是一种极大的在乎。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;01&#34;&gt;01&lt;/h2&gt;

&lt;p&gt;随着年龄的增长，我们渐渐的忙于生计，疲于奔波。不管恋人也好，朋友也罢，能够面对面在一起的机会已经不像学生时代那般充裕。所以，我特别珍惜相处的时间，也特别理解别人不能及时回复我的苦衷。我们在忙得不可开交的时候，来了一条信息，经常看一眼手机搁那儿，转头就忘记回复了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;假如一个人能秒回我的信息，我在那个人心里的分量有多重自然成了一种真真切切的感受，我知道ta是在乎我的。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;记得一个月以前有读者跟我说了这样一个情况：男朋友总是抱怨她不能及时回复信息，最近更是因为这个原因两人打起了冷战。&lt;/p&gt;

&lt;p&gt;我说：及时回信既是两个人在一起的责任也是义务，你是我的对象，我当然希望知晓你的情况。人总有忙时，没人会指望你每时每刻都能秒回。但是假如你愿意抽出一点时间，给一句回复，哪怕只有那么几个字、一句话，对方的心里总是安乐的。&lt;/p&gt;

&lt;p&gt;假若能够秒回那便更好，因为这是忙碌生活中一种极大的在乎，&lt;strong&gt;更是让感情保鲜的安全感。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;02&#34;&gt;02&lt;/h2&gt;

&lt;p&gt;其实，让你在乎的人等待或是等待你在乎的人，都不是一件好受的事情。&lt;/p&gt;

&lt;p&gt;记得我约会等女朋友最长的一次，等了一个多小时。对于许多人来说，这个等待的时间或许并不算长，然而我却忘不了。&lt;/p&gt;

&lt;p&gt;那天约好，我便先出门了，后来大雨滂沱，到地儿发现她没到。我给她发消息说，是不是下雨出不来？她说，雨太大，她爸不让她出门。我说，那干脆算了，反正这么大雨，在家休息也好。她不肯，非要出来，每几分钟就发一条信息安慰我。&lt;/p&gt;

&lt;p&gt;一个多小时后，她一脸委屈，半身淋湿跑到我面前。她说她是哭着求她爸开车送她过来的，说着说着眼泪又下来了。我说你咋又哭了，她说让你等那么久心里难过。我看着她又好气又好笑，但是心里更多的是感动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是啊，真正爱你的人又怎么愿意让你在枯等里徘徊。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有句话是这样说的：等待，因其有所希冀而令人兴奋，而又因等待的过程无所安排而使人百无聊赖。正是这样的百无聊赖，你才更加应该懂得：不要总是让真正在乎你的人在等你，因为往往他们也舍不得让你等。&lt;/p&gt;

&lt;p&gt;《金镂衣》诗云：花开堪折直须折，莫待无花空折枝。&lt;strong&gt;等得久了，感情就淡了。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;03&#34;&gt;03&lt;/h2&gt;

&lt;p&gt;翻相册的时候，找到了一个珍藏了5年的故事，当然不是我的故事，可我却想与你们分享。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;那天老师谈起人际关系的时候，说起了他和他朋友们的故事。&lt;/p&gt;

&lt;p&gt;他说：很多时候，我们拿起话筒总是发觉无话可说，于是，每当我想他的时候，我就拿起手机，响他两声，然后挂掉。至于对方也是如此。这种习惯一直持续到现在。&lt;/p&gt;

&lt;p&gt;听了这段话，心头莫名感动。竟也拿起电话给几个因为时间空间拉开距离的朋友打去。随后我想，或许我和他们并没有老师和他朋友那般的默契。&lt;/p&gt;

&lt;p&gt;于是就给他们在短信里写道：老师说，只要你想一个人了，就响两下ta的手机。不一会儿，他们都回信息了。看着屏幕上的内容，我知道他们一定感动了，或许此刻脸上正洋溢着笑容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个故事就好像秒回一样。当我给关系要好的朋友发信息时，他们总能秒回。&lt;strong&gt;这是一种感情上的默契，更是一种表达最简单的心有灵犀。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;04&#34;&gt;04&lt;/h2&gt;

&lt;p&gt;昨晚朋友发来消息，我第一时间就回复了她。因为已是深夜，她很惊讶我能秒回。&lt;/p&gt;

&lt;p&gt;于是发了个朋友圈圈上我：高中时曾经网恋，那时学校不让带手机，于是自作聪明把手机塞在透明的眼镜盒里，一有信息，透过眼镜盒就能发现屏幕亮了，这样就可以第一时间收到爱的信号。可是长大后发现，朋友圈里的人很多，但真正愿意秒回你的人却很少。如果你和一个人可以互相秒回，那么，世界这么大，人山人海，我想，遇见，就是一件很幸运的事儿。&lt;/p&gt;

&lt;p&gt;我把聊天置顶只为了第一时间能看到他们的消息，然后能及时回复他们。&lt;/p&gt;

&lt;p&gt;有事没事第一时间回复，快乐一起分享，坎坷不让你担忧。若是你我都很好，没有太多的话想说。那么哪怕只是一个表情，三言两语，我知道，我想他们的时候，他们也都想着我，便也知足。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;秒回的意义在于，即使距离再远，我们的心依然能那么近。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;05&#34;&gt;05&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近总是在听苏打绿的《独处的时候》：独处的时候，尽管所有情绪都逃逃逃不开。独处的时候，还是要勉强自己想得开。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个人的等待总是千头万绪，带着一点不安的小脾气。若是我发你消息的时候，你能秒回，那么所有的烦恼都会烟消云散。&lt;/p&gt;

&lt;p&gt;我不用安慰自己，你也许只是忙。我不用安慰自己，你也许手机没电了。我不用安慰自己，你在朋友聚会时忘了我。我不用勉强自己要想开。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;心里时刻装着你的人是宝贵的，不管朋友还是恋人，找一个能秒回的人在一起，珍惜他们。&lt;/strong&gt;因为，他们才是张爱玲所说，在无涯的时间荒野里，没有早一步也没有晚一步，那个和你刚刚好的人。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript基础之函数</title>
      <link>/post/javascript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/</guid>
      
        <description>

&lt;h2 id=&#34;函数课程之前的准备和了解&#34;&gt;函数课程之前的准备和了解&lt;/h2&gt;

&lt;p&gt;在来了解函数之前，我们先来看一下下面的这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;示例&amp;lt;/title&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        var sum=0;
        for(var i=1;i&amp;lt;50;i+=2)
        {
            sum+=i;
        }
        document.write(&amp;quot;50以内所有奇数和为：&amp;quot;+sum);
    &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面代码的功能是计算50以内奇数的和，代码很简单，但是如果我们还需要再来计算下100以内的奇数和呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        var sum1=0;
        for(var i=1;i&amp;lt;50;i+=2)
        {
            sum1+=i;
        }
        document.write(&amp;quot;50以内所有奇数和为：&amp;quot;+sum1);
        document.write(&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;);
        var sum2=0;
        for(var j=1;j&amp;lt;100;j+=2)
        {
            sum2+=j;
        }
        document.write(&amp;quot;100以内所有奇数和为：&amp;quot;+sum2);
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们只需要将代码进行简单的复制和更改，就可以获得我们想要的答案，但是如果这个时候的需求是，计算50、100、150、220等等数值以内的奇数和，我们该怎么做呢？难道要不断的复制代码吗？&lt;/p&gt;

&lt;p&gt;如果真的这样做了，那么我们的代码就会变得异常冗余。&lt;/p&gt;

&lt;p&gt;这个时候，我们今天的主角函数就要登场了。&lt;/p&gt;

&lt;p&gt;虽然没有学函数，但是我们不妨先来看下效果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        //定义函数
        function sum(n)
        {
            var m=0;
            for(var i=1;i&amp;lt;n;i+=2)
            {
                m+=i;
            }
            document.write(n+&amp;quot;以内所有奇数和为：&amp;quot;+m+&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;);
        }
        //调用函数，计算50以内所有奇数的和
        sum(50);
        //调用函数，计算100以内所有奇数的和
        sum(100);
        //调用函数，计算150以内所有奇数的和
        sum(150);
        //调用函数，计算200以内所有奇数的和
        sum(200);
        //调用函数，计算250以内所有奇数的和
        sum(250);
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在浏览器内的效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227115657453.png&#34; alt=&#34;image-20190227115657453&#34; /&gt;&lt;/p&gt;

&lt;p&gt;你会发现，通过函数的形式，可以节省大量的工作，而使用函数只需要两步：&lt;strong&gt;定义函数&lt;/strong&gt;、&lt;strong&gt;调用函数&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;函数的概念&#34;&gt;函数的概念&lt;/h2&gt;

&lt;p&gt;函数，就是一个&lt;strong&gt;一系列JavaScript语句的集合&lt;/strong&gt;，这是为了完成某一个会重复使用的特定功能。在需要该功能的时候，直接调用函数即可，而不必每次都编写一大堆重复的代码。并且在需要修改该功能的时候，也只要修改和维护这一个函数即可。&lt;/p&gt;

&lt;p&gt;总之，将语句集合成函数，好处就是方便代码重用。并且，一个好的函数名，可以让人一眼就知道这个函数实现的是什么功能，方便维护。&lt;/p&gt;

&lt;h2 id=&#34;定义一个函数&#34;&gt;定义一个函数&lt;/h2&gt;

&lt;p&gt;我们在上面说过，想要使用函数，需要两个步骤：&lt;strong&gt;定义函数&lt;/strong&gt;、&lt;strong&gt;调用函数&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;那么该如何定义一个函数呢？&lt;/p&gt;

&lt;p&gt;在JavaScript中，可以通过&lt;strong&gt;function关键&lt;/strong&gt;字来定义一个函数(并且function关键字不可以省略)。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Tip：在定义一个函数的时候，你可以选择给函数设置一个名字，也可以选择不给他设置名字。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不设置函数名的函数&lt;/strong&gt;（赋值式）&lt;/p&gt;

&lt;p&gt;例如下面的函数语法就是没有设置名字的函数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;function (参数1,参数2...) {
	// 函数体语句
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
		
		var documentFont = function () { // 定义函数。
			document.write(&amp;quot;这是一段输出在页面当中的文字&amp;quot;);
		}
		documentFont(); // 调用函数

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227140412523.png&#34; alt=&#34;image-20190227140412523&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Tip：定义一个函数之后，函数本身并不会执行，而是需要调用才可以执行。这一点一定要注意。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设置函数名的函数&lt;/strong&gt;(声明式)&lt;/p&gt;

&lt;p&gt;“指定函数名的函数”是JavaScript中使用最广泛的方法，反而“不指定函数名的函数”用得比较少。&lt;/p&gt;

&lt;p&gt;语法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function 函数名(参数1,参数2,….,参数n) 
{
    //函数体语句
    return 表达式;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解析&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;定义函数&lt;strong&gt;必须使用function关键字。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;函数名必须是唯一的&lt;/strong&gt;，尽量通俗易懂，并且跟你定义的代码有关。&lt;/p&gt;

&lt;p&gt;函数可&lt;strong&gt;以使用return语句将某个值返回，也可以没有返回值&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参数是可选的，可以不带参数，也可以带多个参数&lt;/strong&gt;。如果是多个参数的话，参数之间要用英文逗号隔开。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	 //定义函数
        function addNum(a,b)
        {
            var m=a+b;
            return m;
        }
        //调用函数
        var sum=addNum(1,2);
        document.write(&amp;quot;相加的结果是：&amp;quot;+sum);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227141649565.png&#34; alt=&#34;image-20190227141649565&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我们在&lt;strong&gt;定义函数的时候用到的参数，那就叫“形参”&lt;/strong&gt;，例如上面的a和b就是形参。我们&lt;strong&gt;在调用函数时，与形参对应的数据叫“实参&lt;/strong&gt;。”其实“形参”和“实参”从名字上面来看就很好理解，所谓的形参就是“形同虚设”而到头来被其他数据替代掉的参数，实参就是实实在在的数据。&lt;/p&gt;

&lt;p&gt;使用形参和实参，需要注意形参和实参是&lt;strong&gt;一一对应&lt;/strong&gt;的。通常，在定义函数时使用了多少形参，那么在函数调用时也必须给出多少个参数。&lt;/p&gt;

&lt;p&gt;一句话：定义函数时的参数叫“形参”，调用函数时的参数叫“实参”。&lt;/p&gt;

&lt;h2 id=&#34;函数的调用&#34;&gt;函数的调用&lt;/h2&gt;

&lt;p&gt;使用函数的两个需要注意的问题：&lt;strong&gt;定义函数&lt;/strong&gt;、&lt;strong&gt;调用函数&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;下面来说一下函数的调用。&lt;/p&gt;

&lt;p&gt;常用的函数的调用方式有四种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单调用&lt;/li&gt;
&lt;li&gt;在表达式中调用&lt;/li&gt;
&lt;li&gt;在事件响应中调用&lt;/li&gt;
&lt;li&gt;通过链接调用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们分别来说一下不同的调用方式：&lt;/p&gt;

&lt;h2 id=&#34;简单调用&#34;&gt;简单调用&lt;/h2&gt;

&lt;p&gt;JS函数简单调用，也被称为直接调用。该方法一般比较适用于没有返回值的函数。也就是说相当于执行函数中的语句集合。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;函数名(实参1,实参2,….实参n);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	  //定义函数
        function alertSum()
        {
            //计算1+2+3+…+10的和
            var sum=0;
            for(var i=1;i&amp;lt;=10;i++)
            {
                sum=sum+i;
            }
        alert(sum);
        }
        //调用函数
        alertSum();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227143540006.png&#34; alt=&#34;image-20190227143540006&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;在表达式中调用&#34;&gt;在表达式中调用&lt;/h2&gt;

&lt;p&gt;在表达式中调用函数的方式，一般适用于有返回值的函数，然后函数的返回值参与表达式的计算。通常该方式还会和输出语句（如document.write()、alert()等）搭配使用。&lt;/p&gt;

&lt;p&gt;例如下面的示例，来判断给定的年份是否是闰年：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;公历闰年的简单计算方法（符合以下条件之一的年份即为闰年）
1.能被4整除而不能被100整除.
2.能被400整除.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	// 定义函数。
	function isLeapYear(year) {


		// 判断闰年的条件
		if ((year%4==0) &amp;amp;&amp;amp; (year%100!=0) || (year%400==0)) {
			return year + &amp;quot;年是闰年&amp;quot;;
		}else {
			return year + &amp;quot;年不是闰年&amp;quot;;
		}


	}
	// 调用函数 
	// 使用一个变量来承接返回值
	var reYear = isLeapYear(2008);
	document.write(reYear);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;在事件中调用&#34;&gt;在事件中调用&lt;/h2&gt;

&lt;p&gt;JavaScript是基于事件模型的程序语言，页面加载、用户点击、移动光标等都会产生事件。当事件产生时，JavaScript就可以调用某个函数来针对这个事件做出响应。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button id=&amp;quot;btn&amp;quot;&amp;gt;点击&amp;lt;/button&amp;gt;
&amp;lt;button onclick=&amp;quot;alertHello()&amp;quot;&amp;gt;点击&amp;lt;/button&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	
	// 先找到元素
	var mBtn = document.getElementById(&#39;btn&#39;);

	// 给这个按钮绑定事件
	mBtn.onclick = function () {
		alert(&amp;quot;啊，我被点了一下&amp;quot;);
	}

	function alertHello() {
		alert(&amp;quot;hi man&amp;quot;);
	}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这就是所谓的在事件响应中调用函数，这种方式非常实用。上面实例中的事件是“鼠标的点击事件”。&lt;/p&gt;

&lt;h2 id=&#34;通过链接调用函数&#34;&gt;通过链接调用函数&lt;/h2&gt;

&lt;p&gt;函数除了可以在事件响应中调用外，还可以通过超链接来调用函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&amp;quot;javascript:函数名&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;在超链接中调用函数，指的就是在a标签的href属性中使用“javascript:函数名”来调用函数。当用户点击该超链接时，就会执行调用的相应函数。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&amp;quot;javascript:alertHello();&amp;quot;&amp;gt;点击&amp;lt;/a&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	function alertHello() {
		alert(&#39;Hi,Man!&#39;);
	}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tip：我们也可以写成下面这样，这样可以去除隐藏锚点。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;点击&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;变量在函数中的一些变化&#34;&gt;变量在函数中的一些变化&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;什么是作用域？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作用，能做的事。域，领域。 根据词意理解，作用域解释起来就是说作用范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;全局变量和局部变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实，所谓的全局变量和局部变量，只不过是根据变量的范围来给变量进行了一个区分。说到底，无论是全局变量还是局部变量都是变量。&lt;/p&gt;

&lt;p&gt;从作用域的角度来说，全局变量指的就是在作用域范围覆盖全局(也就是当前整个文件)，而局部变量就是作用域范围仅限于某个范围内(在函数内部)。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	

	// 声明全局变量 
	var a = &amp;quot;hello,world&amp;quot;;

	function fn1() {
		var b = &amp;quot;this is b&amp;quot;; // 这个是局部变量
        // b 的作用域范围仅限于函数内部
        console.log(b);// this is b
	}

	// 我们可以尝试对两个变量进行调用
	console.log(a); // hello,world
	console.log(b); // b is note defined 此时b的调用位置已经超过了b的作用域范围。

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So,函数的出现，除了带来了方便，也带来了一些改变。例如变量分成了全局变量和局部变量。作用域也分成了全局作用域和局部作用域(也叫函数作用域)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;函数内部的全局变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

	function fn1() {
		a = 10 ;  // 在函数中声明变量并未使用var 

		console.log(a); // 10 
	}
	fn1();

	console.log(a); // 10

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的示例中，在函数中声明变量并没有使用&lt;code&gt;var&lt;/code&gt;关键字，那么此时这个变量就变成了一个全局变量。&lt;/p&gt;

&lt;p&gt;但是这种方式其实是一种不推荐的写法。此种写法容易造成&lt;strong&gt;变量的污染&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;变量提升&#34;&gt;变量提升&lt;/h2&gt;

&lt;p&gt;我们上面了解了全局变量和局部变量，局部作用域(函数作用域)和全局作用域。那么下面再来看另外一种在js中非常有意思的情况：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
		
	console.log(a);
	var a = 10;
	console.log(a);


&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227154101350.png&#34; alt=&#34;image-20190227154101350&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上面的代码，第一个会输出&lt;code&gt;undefined&lt;/code&gt;，第二个输出为&lt;code&gt;10&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;疑问：第一个&lt;code&gt;console.log()&lt;/code&gt;语句，输出的是还没有声明的a，为什么会输出一个&lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;答：原因是js中的变量提升导致。&lt;/p&gt;

&lt;p&gt;变量提升即将变量声明提升到它所在作用域的最开始的部分。上面的代码其实在运行的时候相当于变成了下面这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	var a ;  // 将声明语句提升到了当前变量作用域的最上面	
	console.log(a); // 此时a相当于声明但是没有赋值
	a = 10; // 赋值语句原封不动的呆在原地
	console.log(a); // 此时a已经声明并且赋值
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如再来看一下下面的示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

	var a = &amp;quot;hello&amp;quot;; 

	function fn1() {
		var b = &amp;quot;world&amp;quot;;
	}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码在我们看不到的地方发生变量提升后是什么样子呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	var a ; // a 的变量提升被提升到a作用域的最顶端
	a = &amp;quot;hello&amp;quot;; 

	function fn1() {
		var b; // b声明语句被提升到b作用域的最顶端
		b = &amp;quot;world&amp;quot;;
	}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok，相信你，现在应该可以理解了变量的提升，那么再来思考一下下面的这种特殊情况：&lt;/p&gt;

&lt;p&gt;可以先来看下面的示例。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	

	var a = 10;

	function fn1() {
		console.log(a);
	}

	fn1(); // 调用函数

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的函数fn1输出结果相信很多同学都可以猜得到，没错，上面的代码会在控制台输出10.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分析：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们在函数外部声明了全局变量a，那么这个变量在函数中也同样是可以使用的。&lt;/p&gt;

&lt;p&gt;上面的示例很简单，那么看下升级版：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	

	var a = 10;

	function fn1() {
		console.log(a);
        var a = 20;
        console.log(a);
	}

	fn1(); // 调用函数

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时函数中的第一个&lt;code&gt;console.log()&lt;/code&gt;语句输出结果为？第二个输出结果为？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227155239554.png&#34; alt=&#34;image-20190227155239554&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第一个输出&lt;code&gt;undefined&lt;/code&gt;，为什么呢？&lt;/p&gt;

&lt;p&gt;因为函数中重新声明了a，那么这个时候a的声明提升到了函数内部的顶部，覆盖了全局变量a。所以此时直接&lt;code&gt;console.log()&lt;/code&gt;a这个变量为undefined。&lt;/p&gt;

&lt;h2 id=&#34;函数提升&#34;&gt;函数提升&lt;/h2&gt;

&lt;p&gt;上面我们看了在js中的变量提升，可是在js中，除了变量以外，函数同样也存在着提升现象。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	console.log(fn1); // ƒ fn1() {alert(123);}
	function fn1() {alert(123);}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在函数的声明语句的上面打印了函数，结果没有发生报错，而是顺利的打印出了函数，所以我们说，此时函数也同样发生了变量提升。&lt;/p&gt;

&lt;p&gt;当然，也存在一些特殊情况，例如我们说到的函数的另外一种声明方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	console.log(fn1); // undefined
	var fn1 = function () {
		alert(123);
	}
	// fn1();
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时，我们会发现，第一句&lt;code&gt;console.log()&lt;/code&gt;输出的结果变成了&lt;code&gt;undefined&lt;/code&gt;，原因在于函数的声明身上。&lt;/p&gt;

&lt;p&gt;这种写法的函数没有直接声明，而是将函数本身赋值给了一个变量的身上。而变量的提升，提升的仅是声明的过程。&lt;/p&gt;

&lt;p&gt;可以将上面的代码解释为下面的形式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	
	var fn1;
	console.log(fn1); // 此时我们打印的仅是fn1这个声明但是没有赋值的变量，所以为undefined
	var fn1 = function () {
		alert(123);
	}

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;练习-循环九九乘法表&#34;&gt;练习：循环九九乘法表&lt;/h2&gt;

&lt;p&gt;下面来练习一下通过循环输出乘法口诀表，并且，封装成函数，可以自定义输出到几的乘法表。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function fn1(a) {
        document.write(&#39;&amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;&#39;);
        for(var i=1;i&amp;lt;=a;i++) {
            document.write(&amp;quot;&amp;lt;tr&amp;gt;&amp;quot;);
            for (var j=1;j&amp;lt;=i;j++) {
                document.write(&#39;&amp;lt;td&amp;gt;&#39;+i + &#39;x&#39; + j + &#39;=&#39; + (i * j)   +&#39;&amp;lt;/td&amp;gt;&#39;);
            }
            document.write(&#39;&amp;lt;/tr&amp;gt;&#39;);
        }
        document.write(&#39;&amp;lt;/table&amp;gt;&#39;);
    }
    fn1(8);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190227161906011.png&#34; alt=&#34;image-20190227161906011&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;函数参数的升级体验&#34;&gt;函数参数的升级体验&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;当实参个数超过形参个数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面我们在讲解函数的时候，讲解过函数参数分为形参、和实参。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	// 函数的形参和实参
	function fn1(a,b,c) { // 形参
		console.log(a,b,c);
	}

	fn1(10,20,30);// 实参
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面代码中，函数的形参和实参一一对应。&lt;/p&gt;

&lt;p&gt;那么如果实参多于形参会怎么样？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	// 函数的形参和实参
	function fn1(a,b,c) { // 形参
		console.log(a,b,c);
	}

	fn1(10,20,30,40);// 实参数量多于形参数量
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你会发现，当实参数量多于形参数量时，在浏览器中依然可以运行并且不会报错。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190228094523140.png&#34; alt=&#34;image-20190228094523140&#34; /&gt;&lt;/p&gt;

&lt;p&gt;那么我们如果想要获取这个多余的形参该怎么办呢？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	// 函数的形参和实参
	function fn1(a,b,c) { // 形参
		console.log(a,b,c);
		// 获取多余的参数可以依靠arguments
		console.log(arguments);
	}

	fn1(10,20,30,40);// 实参数量多于形参数量
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们将arguments打印出来看下效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/image-20190228100746393.png&#34; alt=&#34;image-20190228100746393&#34; /&gt;你可以在这其中看到，函数在调用过程中传递过来的所有的实参。&lt;/p&gt;

&lt;p&gt;那么现在我们想要获取传递过来的多余的参数，可以使用arguments关键字参数直接获取。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	// 函数的形参和实参
	function fn1(a,b,c) { // 形参
		console.log(a,b,c);
		// 获取多余的参数可以依靠arguments
		console.log(arguments[3]); // 40
	}

	fn1(10,20,30,40);// 实参数量多于形参数量
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;当实参个数少于形参个数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
	function fn1(a,b,c) {
		console.log(a,b,c); // 10 20 undefined
	}
	fn1(10,20);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数的return&#34;&gt;函数的return&lt;/h2&gt;

&lt;p&gt;在上面我们说到函数构成的时候，我们讲到了&lt;code&gt;return&lt;/code&gt;，下面来看一下。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1() {
    return &amp;quot;hello,world&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;return 又叫返回值，不同于直接在函数中输出或者其他操作，使用return的目的是希望通过return在函数的最后拿到想要的值，在函数外面继续其他操作。&lt;/p&gt;

&lt;p&gt;例如，上面的代码，返回了字符串&lt;code&gt;hello,world&lt;/code&gt;，想要使用，可以使用变量来进行接收。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1() {
    return &amp;quot;hello,world&amp;quot;;
}
// 使用变量接收
var a = fn1(); // fn1() 会让函数调用执行，而函数的return会将值返回到这个函数的外部，这样我们在调用的时候就可以通过变量接收
console.log(a); // hello,world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，变量可以省略。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1() {
    return &amp;quot;hello,world&amp;quot;;
}
console.log(fn1()); // hello,world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样也是没有问题的。&lt;/p&gt;

&lt;p&gt;Tip：函数只能有一个返回值。返回值后面的代码将不会执行。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1() {
    return &amp;quot;hello,world&amp;quot;;
    console.log(&#39;你好&#39;); // 这句代码不会执行
}
fn1();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;函数的分类&#34;&gt;函数的分类&lt;/h2&gt;

&lt;p&gt;上面我们讲解了函数的基本用法，但是函数其实也存在不同的分类，而所谓的不同分类指的其实就是函数的不同用法，下面我们来简单的讲解一下不同的函数的用法。&lt;/p&gt;

&lt;h2 id=&#34;闭包函数&#34;&gt;闭包函数&lt;/h2&gt;

&lt;p&gt;在js中，有全局变量和局部变量之分(在函数内部声明 的变量)。&lt;/p&gt;

&lt;p&gt;全局 变量和局部变量在上面的课程中，已经说过，这里不再赘述。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var a = 10 ;
function fn1() {
    console.log(a); // 函数可以随时调用函数外部的全局变量
}
fn1();//10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;反之，在函数之外，则没有办法调用函数内部的变量，除非函数内部声明的是全局变量。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var a = 10;
function fn1() {
	console.log(a); // 调用全局变量a
    var x = 10; // 声明局部变量x
    y = 20; // 声明全局变量y
}
fn1();
console.log(x); // err 没有办法调用
console.log(y); // 可以调用到
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;如何从外部读取局部变量？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。&lt;/p&gt;

&lt;p&gt;那就是在函数的内部，再定义一个函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function f1(){

　　　　var n=999;

　　　　function f2(){
　　　　　　alert(n); // 999
　　　　}

　}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的&amp;rdquo;链式作用域&amp;rdquo;结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。&lt;/p&gt;

&lt;p&gt;既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function f1(){

　　　　var n=999;

　　　　function f2(){
　　　　　　alert(n); 
　　　　}

　　　　return f2;

　　}

　　var result=f1();

　　result(); // 999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;闭包的概念&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上面的代码其实就是一个常见的闭包。在很多书籍里关于闭包的定义非常复杂难懂，而在网上的答案也众口不一。&lt;/p&gt;

&lt;p&gt;个人的理解是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;闭包就是能够读取其他函数内部变量的函数。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成&amp;rdquo;&lt;strong&gt;定义在一个函数内部的函数&lt;/strong&gt;&amp;ldquo;。&lt;/p&gt;

&lt;p&gt;所以，在本质上，&lt;strong&gt;闭包就是将函数内部和函数外部连接起来的一座桥梁。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;闭包函数的用途&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。&lt;/p&gt;

&lt;p&gt;怎么来理解这句话呢？请看下面的代码。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function f1(){

　　　　var n=999;

　　　　nAdd=function(){n+=1}

　　　　function f2(){
　　　　　　alert(n);
　　　　}

　　　　return f2;

　　}

　　var result=f1();

　　result(); // 999

　　nAdd();

　　result(); // 1000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。&lt;/p&gt;

&lt;p&gt;为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。&lt;/p&gt;

&lt;p&gt;这段代码中另一个值得注意的地方，就是&amp;rdquo;nAdd=function(){n+=1}&amp;ldquo;这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用闭包函数的注意点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。&lt;/p&gt;

&lt;p&gt;2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。&lt;/p&gt;

&lt;h2 id=&#34;回调函数&#34;&gt;回调函数&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码。&lt;/p&gt;

&lt;p&gt;简单的说，其实就是将一个函数作为参数传递到另外一个函数当中去，在这个函数的某些时刻执行那个作为参数传递过来的函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1(parm) {
	alert(&amp;quot;hello,world&amp;quot;);
    alert(&amp;quot;hi!Man&amp;quot;);
    parm();
}
function fn2() {
    alert(&amp;quot;我是fn2&amp;quot;);
}
fn1(fn2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的fn2作为参数传递到了fn里面，当fn1执行到指定位置的时候，就会调用fn2，这就是一个简单的回调函数。&lt;/p&gt;

&lt;p&gt;当然，我们在使用回调函数的时候，更多的时候会在满足某些触发条件之后才会执行回调函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1(parm) {
	
    for (var i=0;i&amp;lt;10;i++){
        console.log(i);
        if (i==9) {
            parm();
        }
    }
}
function fn2() {
    alert(&amp;quot;我是fn2&amp;quot;);
}
fn1(fn2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如上面的代码，当i=9时，才会执行回调函数。&lt;/p&gt;

&lt;p&gt;例如我们常用的事件处理函数，其实也是一个回调函数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button id=&#39;btn&#39;&amp;gt;点击&amp;lt;/button&amp;gt;
&amp;lt;script&amp;gt;
	var oBtn = document.getElementById(&#39;btn&#39;);
    oBtn.onclick = function() {
        alert(123);
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当&lt;code&gt;button&lt;/code&gt;元素发生单击这样一个操作之后，才会去执行事件处理函数，也就是回调函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;回调函数的优点和缺点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;优点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DRY，避免代码重复&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以将通用的逻辑抽象&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;业务逻辑分离&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;提高代码的可维护性和可读性&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;分离专职函数&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;缺点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;回调函数层级太多，使用困难&lt;/li&gt;
&lt;li&gt;大量的回调函数运行， 消耗内存，影响性能。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;递归函数&#34;&gt;递归函数&lt;/h2&gt;

&lt;p&gt;递归函数简单的说，就是在函数内部调用当前函数本身。不过在使用递归函数的时候要小心造成死循环。&lt;/p&gt;

&lt;p&gt;所以，在定义递归函数的时候，需要2个必要条件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先要包括一个结束递归的条件&lt;/li&gt;
&lt;li&gt;其次包括一个递归调用的语句&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fact(param) {
    
    if (param &amp;lt; 1) {
        return 1 ;
    }else {
        return param * fact(param-1);
    }
    
}
console.log(fact(3)); // 6 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;练习&#34;&gt;练习&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;斐波那契数列：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;介绍：
    从数学的角度来讲，斐波那契数列表示的是这样的一个数列：1、1、2、3、5、8、13、21、34&amp;hellip;&amp;hellip;。&lt;/p&gt;

&lt;p&gt;从第三个值开始，等于前两个值得和。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 例如求第四个值
	// 斐波那契数列
	function fn1(n) {
		if (n &amp;lt;= 2) {
			return 1 ;
		}else {
			return fn1(n-1) + fn1(n-2);
		}
	}

	console.log(fn1(4)); // 3 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;素数：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;素数又称质数，是大于1的自然数，并且只有1和它本身两个因数。&lt;/p&gt;

&lt;p&gt;下面来写一个函数，判断一下是否是素数？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function fn1(n) {

		for (var i=2;i&amp;lt;n;i++){

			if (n % i ==0) {
				return false;
			}
		}
		return true;
	}
	console.log(fn1(8)); // false
	console.log(fn1(2)); // true
	console.log(fn1(3)); // true
	console.log(fn1(6)); // false
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
  </channel>
</rss>